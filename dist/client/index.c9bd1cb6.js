import { S as SvelteComponent, i as init, s as safe_not_equal, l as create_slot, e as element, t as text, c as claim_element, a as children, j as claim_text, d as detach, b as attr, f as insert, g as append, o as get_slot_changes, p as get_slot_context, q as transition_in, r as transition_out, w as empty, h as space, v as set_data, C as svg_element, D as xlink_attr, E as toggle_class, F as listen, m as mount_component, G as destroy_each, u as destroy_component, B as check_outros, A as group_outros } from './index.4e3102a5.js';

/* src/components/Button.svelte generated by Svelte v3.9.1 */

function create_fragment(ctx) {
	var button, t, current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	return {
		c() {
			button = element("button");

			if (!default_slot) {
				t = text("Bouton");
			}

			if (default_slot) default_slot.c();
			this.h();
		},

		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true, type: true }, false);
			var button_nodes = children(button);

			if (!default_slot) {
				t = claim_text(button_nodes, "Bouton");
			}

			if (default_slot) default_slot.l(button_nodes);
			button_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(button, "class", "btn svelte-1emosyo");
			attr(button, "type", "button");
		},

		m(target, anchor) {
			insert(target, button, anchor);

			if (!default_slot) {
				append(button, t);
			}

			else {
				default_slot.m(button, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(button);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { $$slots, $$scope };
}

class Button extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/components/QuoteRow.svelte generated by Svelte v3.9.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.guarantee = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (69:5) {#if i < 3}
function create_if_block(ctx) {
	var div2, div0, t0_value = ctx.guarantee.DisplayName + "", t0, t1, div1, raw_value = ctx.guarantee.DisplayValue + "", t2;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = space();
			this.h();
		},

		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach);
			t1 = claim_text(div2_nodes, "\n\t\t\t\t\t\t\t");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div1_nodes.forEach(detach);
			t2 = claim_text(div2_nodes, "\n\t\t\t\t\t\t");
			div2_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(div0, "class", "svelte-1s88gq9");
			attr(div1, "class", "svelte-1s88gq9");
			attr(div2, "class", "svelte-1s88gq9");
		},

		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			div1.innerHTML = raw_value;
			append(div2, t2);
		},

		p(changed, ctx) {
			if ((changed.quote) && t0_value !== (t0_value = ctx.guarantee.DisplayName + "")) {
				set_data(t0, t0_value);
			}

			if ((changed.quote) && raw_value !== (raw_value = ctx.guarantee.DisplayValue + "")) {
				div1.innerHTML = raw_value;
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div2);
			}
		}
	};
}

// (68:4) {#each quote.ProductGuarantees as guarantee, i}
function create_each_block(ctx) {
	var if_block_anchor;

	var if_block = (ctx.i < 3) && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (ctx.i < 3) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (78:3) <Button>
function create_default_slot(ctx) {
	var div, t0_value = ctx.quote.YearlyPrice + "", t0, t1;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text("\n\t\t\t\tSouscrire");
			this.h();
		},

		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t0 = claim_text(div_nodes, t0_value);
			div_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\t\t\t\tSouscrire");
			this.h();
		},

		h() {
			attr(div, "class", "svelte-1s88gq9");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			insert(target, t1, anchor);
		},

		p(changed, ctx) {
			if ((changed.quote) && t0_value !== (t0_value = ctx.quote.YearlyPrice + "")) {
				set_data(t0, t0_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div);
				detach(t1);
			}
		}
	};
}

function create_fragment$1(ctx) {
	var quote_row, div6, svg, use, t0, div2, div0, img, img_src_value, t1, t2_value = ctx.quote.PartnerDisplayName + "", t2, t3, div1, t4, t5, button1, t6, div5, div3, t7, t8, div4, t9, current, dispose;

	var each_value = ctx.quote.ProductGuarantees;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	var button0 = new Button({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	}
	});

	return {
		c() {
			quote_row = element("quote-row");
			div6 = element("div");
			svg = svg_element("svg");
			use = svg_element("use");
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			button0.$$.fragment.c();
			t5 = space();
			button1 = element("button");
			t6 = space();
			div5 = element("div");
			div3 = element("div");
			t7 = text("Étudiez le devis en détail");
			t8 = space();
			div4 = element("div");
			t9 = text("Souscrivez à cette offre");
			this.h();
		},

		l(nodes) {
			quote_row = claim_element(nodes, "QUOTE-ROW", {}, false);
			var quote_row_nodes = children(quote_row);

			div6 = claim_element(quote_row_nodes, "DIV", { class: true }, false);
			var div6_nodes = children(div6);

			svg = claim_element(div6_nodes, "svg", { class: true }, true);
			var svg_nodes = children(svg);

			use = claim_element(svg_nodes, "use", { "xlink:href": true }, true);
			var use_nodes = children(use);

			use_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			t0 = claim_text(div6_nodes, "\n\t\t");

			div2 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			t1 = claim_text(div0_nodes, "\n\t\t\t\t");
			t2 = claim_text(div0_nodes, t2_value);
			div0_nodes.forEach(detach);
			t3 = claim_text(div2_nodes, "\n\n\t\t\t");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			t4 = claim_text(div2_nodes, "\n\n\t\t\t");
			button0.$$.fragment.l(div2_nodes);
			t5 = claim_text(div2_nodes, "\n\n\t\t\t");

			button1 = claim_element(div2_nodes, "BUTTON", { class: true, type: true }, false);
			var button1_nodes = children(button1);

			button1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t6 = claim_text(div6_nodes, "\n\t\t");

			div5 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			div3 = claim_element(div5_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			t7 = claim_text(div3_nodes, "Étudiez le devis en détail");
			div3_nodes.forEach(detach);
			t8 = claim_text(div5_nodes, "\n\t\t\t");

			div4 = claim_element(div5_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			t9 = claim_text(div4_nodes, "Souscrivez à cette offre");
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			quote_row_nodes.forEach(detach);
			this.h();
		},

		h() {
			xlink_attr(use, "xlink:href", "dist/bundle.svg#arrow-down");
			attr(svg, "class", "inline-svg-icon");
			attr(img, "src", img_src_value = ctx.quote.PartnerLogo);
			attr(img, "alt", "");
			attr(img, "class", "svelte-1s88gq9");
			attr(div0, "class", "quote-row__logo svelte-1s88gq9");
			attr(div1, "class", "quote-row__features svelte-1s88gq9");
			attr(button1, "class", "btn-dropdown svelte-1s88gq9");
			attr(button1, "type", "button");
			attr(div2, "class", "quote-row__main svelte-1s88gq9");
			attr(div3, "class", "svelte-1s88gq9");
			attr(div4, "class", "svelte-1s88gq9");
			attr(div5, "class", "quote-row__details svelte-1s88gq9");
			toggle_class(div5, "quote-row--expanded", ctx.isExpanded === true);
			attr(div6, "class", "quote-row svelte-1s88gq9");
			dispose = listen(button1, "click", ctx.toggleExpand);
		},

		m(target, anchor) {
			insert(target, quote_row, anchor);
			append(quote_row, div6);
			append(div6, svg);
			append(svg, use);
			append(div6, t0);
			append(div6, div2);
			append(div2, div0);
			append(div0, img);
			append(div0, t1);
			append(div0, t2);
			append(div2, t3);
			append(div2, div1);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div2, t4);
			mount_component(button0, div2, null);
			append(div2, t5);
			append(div2, button1);
			append(div6, t6);
			append(div6, div5);
			append(div5, div3);
			append(div3, t7);
			append(div5, t8);
			append(div5, div4);
			append(div4, t9);
			current = true;
		},

		p(changed, ctx) {
			if ((!current || changed.quote) && img_src_value !== (img_src_value = ctx.quote.PartnerLogo)) {
				attr(img, "src", img_src_value);
			}

			if ((!current || changed.quote) && t2_value !== (t2_value = ctx.quote.PartnerDisplayName + "")) {
				set_data(t2, t2_value);
			}

			if (changed.quote) {
				each_value = ctx.quote.ProductGuarantees;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			var button0_changes = {};
			if (changed.$$scope || changed.quote) button0_changes.$$scope = { changed, ctx };
			button0.$set(button0_changes);

			if (changed.isExpanded) {
				toggle_class(div5, "quote-row--expanded", ctx.isExpanded === true);
			}
		},

		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);

			current = true;
		},

		o(local) {
			transition_out(button0.$$.fragment, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(quote_row);
			}

			destroy_each(each_blocks, detaching);

			destroy_component(button0);

			dispose();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { quote } = $$props;

	// import Icon from './Icon.svelte';

	let isExpanded = false;

	function toggleExpand() {
		if(isExpanded)
		{
			$$invalidate('isExpanded', isExpanded = false);
		} else
		{
			$$invalidate('isExpanded', isExpanded = true);
		}
	}

	$$self.$set = $$props => {
		if ('quote' in $$props) $$invalidate('quote', quote = $$props.quote);
	};

	return { quote, isExpanded, toggleExpand };
}

class QuoteRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["quote"]);
	}
}

/* src/routes/quotes/index.svelte generated by Svelte v3.9.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.quote = list[i];
	return child_ctx;
}

// (21:0) {#each quotes as quote}
function create_each_block$1(ctx) {
	var current;

	var quoterow = new QuoteRow({ props: { quote: ctx.quote } });

	return {
		c() {
			quoterow.$$.fragment.c();
		},

		l(nodes) {
			quoterow.$$.fragment.l(nodes);
		},

		m(target, anchor) {
			mount_component(quoterow, target, anchor);
			current = true;
		},

		p(changed, ctx) {
			var quoterow_changes = {};
			if (changed.quotes) quoterow_changes.quote = ctx.quote;
			quoterow.$set(quoterow_changes);
		},

		i(local) {
			if (current) return;
			transition_in(quoterow.$$.fragment, local);

			current = true;
		},

		o(local) {
			transition_out(quoterow.$$.fragment, local);
			current = false;
		},

		d(detaching) {
			destroy_component(quoterow, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	var t0, h1, t1, t2, each_1_anchor, current;

	var each_value = ctx.quotes;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Quote page");
			t2 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},

		l(nodes) {
			t0 = claim_text(nodes, "\n\n");

			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, "Quote page");
			h1_nodes.forEach(detach);
			t2 = claim_text(nodes, "\n\n");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},

		h() {
			document.title = "Quote page";
		},

		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, h1, anchor);
			append(h1, t1);
			insert(target, t2, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			if (changed.quotes) {
				each_value = ctx.quotes;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) out(i);
				check_outros();
			}
		},

		i(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) transition_in(each_blocks[i]);

			current = true;
		},

		o(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) transition_out(each_blocks[i]);

			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(h1);
				detach(t2);
			}

			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

function preload({ params, query }) {
	return this.fetch(`quotes.json`).then(r => r.json()).then(quotes => {
		return { quotes };
	});
}

function instance$2($$self, $$props, $$invalidate) {
	let { quotes } = $$props;

	$$self.$set = $$props => {
		if ('quotes' in $$props) $$invalidate('quotes', quotes = $$props.quotes);
	};

	return { quotes };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["quotes"]);
	}
}

export default Index;
export { preload };
